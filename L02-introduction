# บทเรียน 2 - ประวัติศาสตร์, ปัจจุบัน และ อนาคต

การเรียนรู้ประวัติศาสตร์เป็นจุดเริ่มต้นที่สำคัญที่จะทำให้เราเข้าใจว่า React นั้นเกิดขึ้นมาเพื่อจุดประสงค์อะไร คนที่สร้าง React ต้องการแก้ปัญหาอะไร และทำไม React ถึงได้ถูกออกแบบมาในลักษณะนี้

เมื่อเราเข้าใจถึงที่มาที่ไปของ React แล้ว ผมเชื่อว่า

1. นำ React ไปใช้ได้ถูกสถานการณ์ เพราะ React ก็ถือว่าเป็นเครื่องมือชิ้นหนึ่ง เราควรใช้เครื่องมือให้เหมาะกับปัญหาด้วย
2. สร้างรากฐานที่ดี อาจทำให้เกิดจังหวะปิ๊งป่องได้ในอนาคต เวลาเจอเคสที่ซับซ้อนมากขึ้น
3. มองเห็นภาพรวมของการเปลี่ยนแปลง และ API ที่เปลี่ยนไป

## ประวัติศาสตร์

เราจะย้อนกลับไปในช่วงก่อนปี 2010 ซึ่ง React ยังไม่เกิดนะครับ ช่วงนั้นเนี่ยเราจะเห็นว่ามี js framework ต่างๆมากมาย เราจะได้ยินคำนี้เยอะมากนะครับ MVC, MVVM, MVW แต่ไม่ว่าจะเป็น M อะไรก็ตาม สิ่งที่คล้ายกันก็คือการสร้าง observable object ที่สามารถ subscribe ได้ จากนั้นถ้า data เปลี่ยน เราก็จะทำการเปลี่ยนรูป หรือ mutate view 

key สำคัญอยู่ที่คำว่า Mutation เวลาที่แอพของเราใหญ่ขึ้นเรื่อยๆ การ mutate(ในเคสของ UI คือ DOM) อะไรก็ตามจะยิ่งเพิ่ม complexity และทำให้เราคาดเดาผลลัพธ์ที่จะเกิดขึ้นได้ยากขึ้น ทีนี้ก็เลยมีคนคิดไอเดียนี้ขึ้นมา what if? ถ้าหากว่าเราไม่ mutate แต่สร้างใหม่ทุกครั้งเมื่อ data เปลี่ยนล่ะ ?? หืมมม...จะเวิคหรอ ในตอนนั้นมันดูเป็นไอเดียที่แย่มากเพราะว่าการสร้าง DOM ขึ้นมาใหม่นั้นดูไม่น่าเป็นไปได้เลย เช่น ถ้าตอนนั้น user กำลังพิมอยู่แล้วเราไป render view ใหม่ทับเข้าไป ux ไม่ดีแน่นอน ...โอเค ถ้างั้นเราไม่ยุ่งกับ DOM แต่เราจะโยนหน้าที่นี้ไปให้ javascript แทน แน่นอนว่าก็ยังมีข้อสงสัยอยู่ว่า performance มันจะต้องแย่แน่นอนเลยเพราะว่า ทุกๆครั้งที่ data เปลี่ยน เราจะต้องสร้าง tree ที่แสดงถึง view อันใหม่ขึ้นมา แล้วเอามาเทียบกับของเก่า เพื่อจะหาว่ามีจุดไหนเปลี่ยนบ้าง แล้วค่อยไล่ mutate DOM อีกที ...แต่ปรากฏว่า javascript นั้นเร็วมากๆ ซึ่งสุดท้ายแล้วมันเวิค ถึงจุดนี้ผมคิดว่าคงมีบางท่านที่เริ่มคุ้นๆกับสิ่งที่ผมเล่าให้ฟังบ้างแล้วนะครับ ถูกต้องครับ ต่อมามันมีชื่อว่า Virtual DOM นั่นเอง
  
แน่นอนครับไอเดียนี้ไม่ได้มาจากผมแน่นอน แต่เป็นคนนี้ครับ Jordan Walke ตอนนั้นเป็น engineer อยู่ที่ facebook ทำในส่วนของ facebook ads เป็นหลัก และด้วยความที่เค้าชื่นชอบ functional programming มาก จึงมีอิทธิพลทำให้ react มี API ออกไปทาง functional programming

ด้วยเหตุผลนี้เอง แนวคิดของ React จึงเปลี่ยนจาก Mutation มาเป็น Reconciliation หรือแปลเป็นไทยได้ว่า กระบวนการเปรียนเทียบความแตกต่าง (diffing algorithm)

Reconciliation ทำให้ React เป็นที่ชื่นชอบของโปรแกรมเมอร์มากๆ โดย React ปล่อยให้เราควบคุม logic ของ application ที่เราต้องการ จากนั้นส่งผลลัพธ์ที่เราคาดหวังไปให้กับ React ในรูปของ JSX จากนั้น React จะเป็นคนจัดการงานในส่วนของการอัพเดท UI บนหน้าจอให้กับเรา เมื่อข้อมูลมีการเปลี่ยนแปลง React จะการันตีว่าสิ่งที่แสดงผลบนหน้าจอนั้นตรงกับผลลัพธ์ที่ส่งไปให้ล่าสุด

```
 **Challenge**

ลองสร้าง Todo App ง่ายๆ ด้วย javascript โดยไม่พึ่ง library อะไรเลย
```
